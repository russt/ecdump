#see also:  ecProp.defs
sub loadProp
#load this property.
{
    my ($self) = @_;
    my ($name, $id) = ($self->propertyName(), $self->propertyId());

    printf STDERR "LOADING EC PROPERTY (%s,%s)\n", $name, $id if ($DDEBUG);

    #get my description (method defined in ecProjects):
    $self->fetchDescription('ec_property', $id);

    #get my content:
    $self->fetchPropertyContent($name, $id);

    #if we have kid properties (and we are not a EC snapshoot prop)...
    for my $kidobj ($self->getKidPropList()) {
        ##### recursive call #####
        $kidobj->loadProp();
    }

    return 0;
}

sub dumpProp
#dump this property.
{
    my ($self, $indent) = @_;
    my ($name, $id) = ($self->propertyName(), $self->propertyId());
    my $outroot = $self->rootDir();

    printf STDERR "%sDUMPING EC PROPERTY (%s,%s) -> %s\n", ' 'x$indent, $name, $id, $outroot if ($DEBUG);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #write my description out:
    $self->dumpDescription();
    $self->dumpPropertyContent();

    #if we have kid properties...
    for my $kidobj ($self->getKidPropList()) {
        ##### recursive call #####
        $kidobj->dumpProp($indent+2);
    }

    return 0;
}

sub dumpPropertyContent
#write the property content to a file called content.
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getPropertyContent();
    my $contentfn = $self->propertyContentFname();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->rootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, $contentfn));
}

sub addKidProps
#add kid prop objects
#call only if property_sheet_id is non-null.
#returns 0 if successful.
{
    my ($self, $parentSheetId, $parentname, $parentid) = @_;
    my ($sqlpj) = $self->sqlpj();

    #this query can return thousands of rows if we are following generated properties.
    #limit the number of properties we retrieve so we can see if it is a candidate for our exception list.  RT 3/10/13
    my $querylimit = 100;
    my $lbuf = sprintf("select name,id from ec_property where parent_sheet_id=%d limit %d", $parentSheetId, $querylimit);

    printf STDERR "%s: running sql query to get name from ID\n", ::srline() if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect one or more rows containing (name,id) pairs
    } @{$sqlpj->getQueryResult()};

    my $cnt = $#results+1;

    #no results are okay - just means that there are not commands associated with procedure step.
    if ( $cnt == 0 ) {
        printf STDERR "%s:  WARNING:  property sheet '%s'[%s]: expected kids but found none.\n", ::srline(), $parentname, $parentid unless ($QUIET);
        return 0;
    }

    #if count of results is not a multiple of 2 ...
    if ( ($cnt == 0) || (($cnt) % 2) != 0 ) {
        printf STDERR "%s:  ERROR:  query '%s' count of results (%d) is zero or not a multiple of 2 (name,id).\n", ::srline(), $lbuf, $cnt;
        return 1;
    }

    #otherwise, allocate new kid prop for each result:
    my @kidobjs = ();
    for (my $ii=0; $ii < $#results; $ii += 2) {
        #do not add prop if in the ignore list:
        my ($name, $id) = ($results[$ii],$results[$ii+1]);
        if (defined($IgnorePropSheets{$name})) {
            ++$IgnorePropSheets{$name};
        } else {
            push @kidobjs, new {=_ECPROP_PACKAGE=}($self, $name, $id);
        }
    }

    #add list of kid props to this prop:
    $self->setKidPropList(@kidobjs); 

    return 0;
}

sub fetchPropertyContent
#fetch the property content for a given property id.
#caller must have a setPropertyContent(string) method.
#return 0 if successful
{
    my ($self, $name, $id) = @_;
    my ($sqlpj) = $self->sqlpj();

    #this is a result:
    $self->setPropertyContent('');

    #this query should return only one row:
    my $lbuf = sprintf("select property_type,string,numeric_value,clob_id,property_sheet_id from ec_property where id=%d", $id) ;

    printf STDERR "%s: running sql query to get property content fields\n", ::srline() if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect one row with (property_type,string,numeric_value,clob_id,property_sheet_id)
    } @{$sqlpj->getQueryResult()};

    if ( $#results+1 != 5 ) {
        printf STDERR "%s:  ERROR:  query '%s' returned wrong number of results (%d).\n", ::srline(), $lbuf, $#results+1;
        return 1;
    }

    #map undefined values:
    @results = map {
        defined($_) ? $_ : '';
    } @results;

    my ($property_type, $string, $numeric_value, $clob_id, $property_sheet_id) = @results;

    printf STDERR "%s: (property_type,string,numeric_value,clob_id,property_sheet_id)=(%s)\n", ::srline(), join(',', @results) if ($DDEBUG);

    #Note:  if we have a string and a clob, we prefer the clob, which is the full content

    if ($clob_id ne '') {
        my $clobtxt = '';
        if ($self->fetchClobText(\$clobtxt, $clob_id) != 0) {
            printf STDERR "%s:  ERROR:  failed to fetch property clob='%s' for %s[%s]\n", ::srline(), $clob_id, "ec_property", $id;
            return 1;
        }
        $self->setPropertyContent($clobtxt);
    } elsif ($string ne '') {
        $self->setPropertyContent($string);
    } elsif ($numeric_value ne '') {
        $self->setPropertyContent($numeric_value);
    }

    #now add kid properties for this sheet if we have:
    if ($property_type eq "Sheet" && $property_sheet_id ne '') {
        if ($self->addKidProps($property_sheet_id, $name, $id) != 0) {
            printf STDERR "%s:  ERROR:  failed to add child property for (%s,%s)->%s\n", ::srline(), $self->propertyName, $self->propertyId, $property_sheet_id;
            return 1;
        }

        #othewise addKidProps set us up - successful.
    }

    return 0;
}
