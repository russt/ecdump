#
#ecParameters.defs -  definitions for ecParameters object.
#

#allows us to run stand-alone:
%ifndef CG_ROOT %include ../build_setup.defs

{ ## header section
PL_PACKAGE = $ECPARAMETERS_PACKAGE
PL_PACKAGE_DESCRIPTION = collection of EC Parameters

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

{
PL_EXTERN_PKG_IMPORTS = << (
)
PL_PKG_IMPORTS = << (
use $_ECPARAMETER_PACKAGE;
require $_UTILS_PACKAGE;
)
%if    $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS:rnewline
%ifnot $GEN_ONE_MODULE   PL_PKG_IMPORTS = ${PL_EXTERN_PKG_IMPORTS:rnewline}$PL_PKG_IMPORTS
}

PL_PKG_ATTRIBUTES := << (
{=_UTILS_PACKAGE=}->import;
our @ISA = qw({=_ECPROJECTS_PACKAGE=});

#standard debugging attributes:
my ($VERBOSE, $DEBUG, $DDEBUG, $QUIET) = (0,0,0,0);
)
%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES

####
#add to ATTRIBUTE_LIST as required.
#templates are: (r/w) pl_getset, pl_getsetlist; (r/o) pl_attr_method, pl_attrlist_method
####
ATTRIBUTE_LIST := << (
#debugging and verbosity levels, inherited from parent (r/w):
Debug	pl_getset	$cfg->getDebug()
DDebug	pl_getset	$cfg->getDDebug()
Quiet	pl_getset	$cfg->getQuiet()
Verbose	pl_getset	$cfg->getVerbose()
#sqlpj interface (r/o):
Sqlpj	pl_attr_method	$cfg->sqlpj()
#local project attributes:
RootDir	pl_attr_method	undef
#parameters have different linking tables based on parent entity:
ParameterTable	pl_attr_method	$parentParameterTable
ParameterTableIdColumn	pl_attr_method	$parentParameterTableIdColumn
#this is the ec_procedure id, or the ec_procedure_step id.
ParentEntityId	pl_attr_method	$parentId
#this is the ec_procedure name, or the ec_procedure_step name.
ParentEntityName	pl_attr_method	$parentName
DbKeysInitialized	pl_getset	0
NameIdMap	pl_getset	undef
#this is my list of EC parameter objects:
EcParameterList	pl_attrlist_method	[]
)
#see also:  m/ecParameters_mthd.defs
%evalmacro ATTRIBUTE_LIST ATTRIBUTE_LIST
#generate attribute accessors (this creates class_attribute_dcls, getset_methods):
%include perl/genattr.defs
%call generate_attribute_accessors
}
{ ## constructor section
PL_CONSTRUCTOR_BODY := << (
my ($cfg, $parentName, $parentId, $parentParameterTable, $parentParameterTableIdColumn) = @_;
# e.g. 'ec_procedure_formal_parameter', 'procedure_id'
)
%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << (
{=class_attribute_dcls=}
)
%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << (
#set output root for the properties (this will be in parent dir):
$self->{'mRootDir'} = path::mkpathname($cfg->rootDir(), ec2scm('parameters'));

#cache initial debugging and vebosity values in local package variables:
$self->update_static_class_attributes();
)
%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

PL_UPDATE_CLASS_STATIC_ATTRIBUTES := << (
$DEBUG   = $self->getDebug();
$DDEBUG  = $self->getDDebug();
$QUIET   = $self->getQuiet();
$VERBOSE = $self->getVerbose();
)

{ ## class methods

PL_PKG_METHODS := << (

{=%include m/ecParameters_mthd.defs=}

{=getset_methods=}

sub update_static_class_attributes
#static class method to update package level attributess as required
#used to set verbosity and debugging for all objects of the class post-instantiation.
{
    my ($self) = @_;
{=$PL_UPDATE_CLASS_STATIC_ATTRIBUTES:indent=}
}
)

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}
