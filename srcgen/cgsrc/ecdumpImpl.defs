#
#ecdumpImpl.defs -  definitions for ecdumpImpl object.
#

#allows us to run stand-alone:
%ifdef BUILD_SETUP_COMPLETE %include build_setup.defs

{ ## header section
%ifndef PL_PACKAGE       PL_PACKAGE = $ECDUMPIMPL_PACKAGE
PL_PACKAGE_DESCRIPTION = perl/jdbc sql command line interpreter

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

{
PL_EXTERN_PKG_IMPORTS = << [
require "sqlpj.pl";
]
PL_PKG_IMPORTS = << [
]
%if    $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS
%ifnot $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS$PL_PKG_IMPORTS
}

PL_PKG_ATTRIBUTES := << [
my ($VERBOSE, $DEBUG, $DDEBUG, $QUIET) = (0,0,0,0);
]
#%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}

{ ## constructor section
PL_CONSTRUCTOR_BODY := << [
my ($cfg) = @_;
]
#%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << [
'mConfig'      => $cfg,
'mSqlpjConfig' => $cfg->getSqlpjConfig(),
'mSqlpj'       => $cfg->getSqlpjImpl(),
]
%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << [
$DEBUG   = $cfg->getDebug();
$DDEBUG  = $cfg->getDDebug();
$QUIET   = $cfg->getQuiet();
$VERBOSE = $cfg->getVerbose();
]
%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

{
#clear standard accessor accumulator:
getset_methods =

###########
#read/write (get/set) attributes:
###########

##########
#read-only attributes:
##########
PL_ATTRIBUTE_NAME = Config
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = SqlpjConfig
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = Sqlpj
%evalmacro >> getset_methods pl_attr_method
}

{
PL_PKG_METHODS := << [
]

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}
