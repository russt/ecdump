#
#pkgconfig.defs -  definitions for pkgconfig object.
#

#allows us to run stand-alone:
%ifdef BUILD_SETUP_COMPLETE %include build_setup.defs

{ ## header section
PL_PACKAGE = $PKGCONFIG_PACKAGE
PL_PACKAGE_DESCRIPTION = Configuration parameters for sqlpj package

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

PL_PKG_IMPORTS := << EOF
require "sqlpj.pl";
EOF
#%evalmacro PL_PKG_IMPORTS PL_PKG_IMPORTS

PL_PKG_ATTRIBUTES := << EOF
EOF
#%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}

{
####
#add to ATTRIBUTE_LIST as required.
#templates are: (r/w) pl_getset, pl_getsetlist; (r/o) pl_attr_method, pl_attrlist_method
####
ATTRIBUTE_LIST := << (
ProgName	pl_getset	undef
PathSeparator	pl_getset	undef
VersionNumber	pl_attr_method	"{=VERSION_STR=}"
VersionDate	pl_attr_method	"{=VERSION_DATE=}"
#utils class:
Utils	pl_getset	undef
Debug	pl_getset	0
DDebug	pl_getset	0
Quiet	pl_getset	0
Verbose	pl_getset	0
JdbcClassPath	pl_getset	undef
JdbcDriverClass	pl_getset	undef
JdbcUrl	pl_getset	undef
JdbcUser	pl_getset	undef
JdbcPassword	pl_getset	undef
JdbcPropsFileName	pl_getset	undef
SqlpjConfig	pl_getset	undef
SqlpjImpl	pl_getset	undef
ProjectList	pl_getsetlist	undef
OutputDirectory	pl_getset	'<NULL>'
DoClean	pl_getset	0
HaveProjects	pl_getset	0
DumpAllProjects	pl_getset	0
HaveListCommand	pl_getset	0
HaveDumpCommand	pl_getset	0
)
%evalmacro ATTRIBUTE_LIST ATTRIBUTE_LIST
#generate attribute accessors (this creates class_attribute_dcls, getset_methods):
%include perl/genattr.defs
%call generate_attribute_accessors
}

{ ## constructor section
PL_CONSTRUCTOR_BODY := << EOF
EOF
#%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << (
{=class_attribute_dcls=}
)
%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << EOF
#initialize project list to be a ref to an empty list (was not able to do this in the hash init).
$self->{'mProjectList'} = [];
EOF
#%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

{
PL_PKG_METHODS := << [
sub initSqlpjConfig
{
    my ($self, $scfg) = @_;

    #init sqlpj configuration object:
    $self->setSqlpjConfig($scfg);

    #set program name used in sqlpj messages:
    $scfg->setProgName($self->getProgName());
    $scfg->setDebug  ($self->getDebug());
    $scfg->setDDebug ($self->getDDebug());
    $scfg->setQuiet  ($self->getQuiet());
    $scfg->setVerbose($self->getVerbose());

    #if user supplied a JDBC properties file ...
    if ( $self->getJdbcPropsFileName() ) {
        #... then parse it with sqlpj method ...
        $scfg->setJdbcPropsFileName($self->getJdbcPropsFileName());
        $scfg->parseJdbcPropertiesFile();

        #... and copy the results to our configuration:
        $self->copyJdbcConfigFrom($scfg);
    } else {
        #copy the jdbc config supplied by the user to the sqlpj config:
        $self->copyJdbcConfigTo($scfg);
    }
}

sub copyJdbcConfigFrom
{
    my ($self, $from) = @_;

    $self->setJdbcClassPath  ($from->getJdbcClassPath());
    $self->setJdbcDriverClass($from->getJdbcDriverClass());
    $self->setJdbcPassword   ($from->getJdbcPassword());
    $self->setJdbcUrl        ($from->getJdbcUrl());
    $self->setJdbcUser       ($from->getJdbcUser());
}

sub copyJdbcConfigTo
{
    my ($self, $to) = @_;

    $to->setJdbcClassPath  ($self->getJdbcClassPath());
    $to->setJdbcDriverClass($self->getJdbcDriverClass());
    $to->setJdbcPassword   ($self->getJdbcPassword());
    $to->setJdbcUrl        ($self->getJdbcUrl());
    $to->setJdbcUser       ($self->getJdbcUser());
}

{=$getset_methods:rtrim=}

sub update_static_class_attributes
#method to update package level attributess as required
{
}
]
%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}
