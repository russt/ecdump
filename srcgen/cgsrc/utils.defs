#
#utils.defs -  definitions for utils object.
#

#allows us to run stand-alone:
%ifndef CG_ROOT %include ../build_setup.defs

{ ## header section
PL_PACKAGE = $UTILS_PACKAGE
PL_PACKAGE_DESCRIPTION = ecdump utility routines

{
PL_EXTERN_PKG_IMPORTS = << (
use Exporter 'import';
)

PL_PKG_IMPORTS = << (
)

%if    $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS
%ifnot $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS$PL_PKG_IMPORTS
}

PL_PKG_ATTRIBUTES := << (
#symbols we export by default:
our @EXPORT = qw(ec2scm scm2ec dumpThisObject dumpDbKeys);
)
%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES

{ ## module methods

PL_PKG_METHODS := << (

sub ec2scm
#map EC entity names to legal scm filenames.
#TODO:  decide on translation map, perhaps map unwanted chars to UTF-8?
{
    my ($name) = @_;

    #delete quotes and backslashes until I can think of a better idea.  RT 3/8/13
    $name =~ tr/\'\"\\//d;

    return $name;
}

sub scm2ec
#map scm filenames back to EC entity names.
{
    my ($name) = @_;

    return $name;
}

sub dumpThisObject
{
    my ($aref) = @_;

    for my $kk (keys %$aref) {
        printf STDERR "DUMP kk='%s' aref{%s}='%s'\n", $kk, $kk, defined($$aref{$kk})? $$aref{$kk} : "UNDEF";
    }
}

sub dumpDbKeys
#dump the name, id pairs commonly used to index a db table
{
    my ($aref) = @_;

    for my $kk (sort keys %$aref) {
        printf STDERR "dbKey{%s}='%s'\n", $kk, $$aref{$kk};
    }
}
)

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}
