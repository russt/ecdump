#use new %foreach form:
%pragma version 1.99

%include ../build_setup.defs

%ifdef  MKOBJS    MKOBJS = 1
%ifndef MKOBJS    MKOBJS = 0

%ifnot $MKOBJS %include ecdump_objs.defs
%if    $MKOBJS %include ecdump_new.defs

%ifndef CG_ROOT    CG_ROOT = ./bld/objects
CG_ROOT = $CG_ROOT_BASE/objects

#use local templates to create a collection,object pattern.


generate_ec_methods := << //
{
    %echo generating methods for $EcOjectName ...

    #these are derived from base defs:
    EcOjectNamePlural = ${EcOjectName}s
    ecOjectName       = $EcOjectName:uncap
    ecObjectNamePlural= ${ecOjectName}s
    ecobject_phrase_plural = ${ecobject_phrase}s
    ECOBJECT_PHRASE        = $ecobject_phrase:toupper
    ECOBJECT_PHRASE_PLURAL = $ecobject_phrase_plural:toupper

    ecOjectShortName     = ${EcOjectShortName:uncap}
    EcObjectSwitchPrefix = ${EcOjectShortName:tolower}_

    #allow whitespace in sql select specs:
    CG_SPLIT_PATTERN = /[\n\t, ]+/
    ecSelectStack          = $EcObjectDbSelectList:split
    ecFetchStack           = $EcObjectDbFetchList:split
    ecSwitchStack           = $EcObjectDbSwitchList:split

    #output comma separated lists via :showstack:
    CG_STACK_DELIMITER = ,
    CG_GREP_SPEC := $_ = '$' . $_

    #reformat select lists.. this could be more nicely done. RT 3/25/13
    EcObjectDbSelectList   = $ecSelectStack:showstack
    EcObjectPerlSelectList = $ecSelectStack:g:showstack
    EcObjectSelectCount    = $ecSelectStack:stacksize

    #for full fetch:
    EcObjectDbFetchList    = $ecFetchStack:showstack
    EcObjectPerlFetchList = $ecFetchStack:g:showstack
    EcObjectFetchCount     = $ecFetchStack:stacksize

    #for switch settings:
    EcObjectDbSwitchList    = $ecSwitchStack:showstack
    EcObjectPerlSwitchList = $ecSwitchStack:g:showstack
    EcObjectSwitchCount     = $ecSwitchStack:stacksize

    #create sprintf format for switch settings:
    CG_GREP_SPEC := $_ = "{=EcObjectSwitchPrefix=}" . "$_" . "='%s'"
    %evalmacro CG_GREP_SPEC CG_GREP_SPEC
    %void $CG_STACK_DELIMITER:clr:nl:a
    EcObjectSwitchSprintfStr = $ecSwitchStack:g:showstack

#%eecho CG_GREP_SPEC=.$CG_GREP_SPEC.
#%eecho EcObjectSwitchSprintfStr=$EcObjectSwitchSprintfStr

    #write the collection implementation:
    templates/ecCollection_template.defs	m/ec${EcOjectNamePlural}_mthd.defs

    #write the object implementation:
    templates/ecObject_template.defs	m/ec${EcOjectName}_mthd.defs
}
//

clear_ec_defs := << //
{
    %undef /^Ec.*/
    %undef /^ec.*/
    %undef /EC.*/
}
//

genProcedureStepMethods := << //
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = ProcedureStep
    EcOjectShortName= ProcStep
    ecobject_phrase = procedure step
    _ECOBJECT_PACKAGE = {=_ECPROCEDURESTEP_PACKAGE=}

    EcObjectDbTable        = ec_procedure_step
    EcObjectDbObjectKey    = procedure_id
    EcObjectDbSelectList   = name,id,property_sheet_id,actual_parameters_id
    EcObjectDbFetchList    = step_index,subprocedure,subproject,acl_id,always_run,broadcast,error_handling,exclusive_mode,log_file_name,parallel,release_mode,resource_name,shell,time_limit,time_limit_units,working_directory,workspace_name,command_clob_id,post_processor_clob_id,step_condition_clob_id,post_processor,step_condition,command

    %call generate_ec_methods
}
//

genScheduleMethods := << //
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = Schedule
    EcOjectShortName= Sched
    ecobject_phrase = schedule
    _ECOBJECT_PACKAGE       = $_ECSCHEDULE_PACKAGE:nameof:cgvar
    _ECOBJECT_PROPS_PACKAGE = $_ECPROPS_PACKAGE:nameof:cgvar

    EcObjectDbTable        = ec_schedule
    EcObjectDbObjectKey    = project_id
    EcObjectDbSelectList   = name,id,property_sheet_id,actual_parameters_id

EcObjectDbTableComment := << [
###########
#Attributes of interest in ec_schedule
#    id, version, name, begin_date, description, disabled, end_date,
#    run_interval, interval_units, misfire_policy, month_days,
#    priority, procedure_name, start_time, stop_time, time_zone, week_days,
#    acl_id, property_sheet_id, actual_parameters_id, description_clob_id, project_id
###########
]

    #####
    #note - we don't need to refetch data in EcObjectDbSelectList or description related fields.
    #####
    EcObjectDbFetchList := << [
project_id, procedure_name, version, begin_date, disabled, end_date,
run_interval, interval_units, misfire_policy, month_days,
priority, start_time, stop_time, time_zone, week_days
]

    #list of fields to be treated as switches, go in *.settings file
    EcObjectDbSwitchList := << [
begin_date, disabled, end_date,
run_interval, interval_units, misfire_policy, month_days,
priority, start_time, stop_time, time_zone, week_days, version
]
    %call generate_ec_methods
}
//

CG_FOREACH_SPLIT_PATTERN = /,/
generateList = genProcedureStepMethods,genScheduleMethods

%foreach generator generateList %call $generator
