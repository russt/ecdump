#
# mkMethods.cg - generate code to implement ecdump collection/object pattern.
#
# WARNING:
#    the last fetch method generated was for ec_resources combined with ec_agent table.
#    this required that switch (*.settings) definitions include the prefix instead of generating it,
#    which in turn requires that the switch prefix agree with the fetch list table prefixes,
#    I.e., if you say in the sql "from ec_resources rsrc" you would specify
#    "rsrc_foo" in the switch settings list to indicate that foo belongs to ec_resources.
#
#    The use if the prefix is now necessary even if there is only one table.
#    The benefit is that the table fetch variables are much less likey to clash
#    with other variables in perl (e.g., $name, $id).
#    RT 4/8/2013
#

#use new %foreach form:
%pragma version 1.99

%include ../build_setup.defs

%ifdef  MKOBJS    MKOBJS = 1
%ifndef MKOBJS    MKOBJS = 0

%ifnot $MKOBJS %include ecdump_objs.defs
%if    $MKOBJS %include ecdump_new.defs

%ifndef CG_ROOT    CG_ROOT = ./bld/objects
CG_ROOT = $CG_ROOT_BASE/objects

#use local templates to create a collection,object pattern.

generate_ec_methods_top_entity := << //
#alternate generate method - only used for Cloud object
{
    %echo generating methods for $EcOjectName ...

    #these are derived from base defs:
    EcOjectNamePlural = ${EcOjectName}
    ecOjectName       = $EcOjectName:uncap
    ecObjectNamePlural= ${ecOjectName}
    ecobject_phrase_plural = ${ecobject_phrase}
    ECOBJECT_PHRASE        = $ecobject_phrase:toupper
    ECOBJECT_PHRASE_PLURAL = $ecobject_phrase_plural:toupper

    ecOjectShortName     = ${EcOjectShortName:uncap}
    EcObjectSwitchPrefix = ${EcOjectShortName:tolower}_

    ecOjectShortName     = ${EcOjectShortName:uncap}
    EcObjectSwitchPrefix = ${EcOjectShortName:tolower}_

    #write the collection implementation:
    templates/ecTopEntity_template.defs	m/ec${EcOjectName}_mthd.defs
}
//

generate_ec_methods := << //
{
    %echo generating methods for $EcOjectName ...

#OLD: my $lbuf = sprintf("select {=EcObjectDbFetchList=} from {=EcObjectDbTable=} where id=%d", $id);
#NEW: my $lbuf = sprintf("select {=EcObjectDbSelectList=} from {=EcObjectDbFetchFromClause=} where {=EcObjectDbFetchWhereClause=}", $id);
    %ifndef EcObjectDbFetchFromClause     EcObjectDbFetchFromClause  = $EcObjectDbObjectKey
    %ifndef EcObjectDbFetchWhereClause    EcObjectDbFetchWhereClause = where id=%d

    #these are derived from base defs:
    EcOjectNamePlural = ${EcOjectName}s
    ecOjectName       = $EcOjectName:uncap
    ecObjectNamePlural= ${ecOjectName}s
    ecobject_phrase_plural = ${ecobject_phrase}s
    ECOBJECT_PHRASE        = $ecobject_phrase:toupper
    ECOBJECT_PHRASE_PLURAL = $ecobject_phrase_plural:toupper

    ecOjectShortName     = ${EcOjectShortName:uncap}
    EcObjectSwitchPrefix = ${EcOjectShortName:tolower}_

    #allow whitespace in sql select specs:
    CG_SPLIT_PATTERN = /[\n\t, ]+/
    ecSelectStack          = $EcObjectDbSelectList:trim:split
    ecFetchStack           = $EcObjectDbFetchList:trim:split
    ecSwitchStack           = $EcObjectDbSwitchList:trim:split

    #output comma separated lists via :showstack:
    CG_STACK_DELIMITER = ,
    CG_GREP_SPEC := $_ = '$' . $_

    #reformat select lists.. this could be more nicely done. RT 3/25/13
    EcObjectDbSelectList   = $ecSelectStack:showstack
    EcObjectSelectCount    = $ecSelectStack:stacksize
    EcObjectPerlSelectList = $ecSelectStack:g:showstack

    #for full fetch:
    EcObjectDbFetchList    = $ecFetchStack:showstack
    EcObjectFetchCount     = $ecFetchStack:stacksize

    CG_GREP_SPEC := $_ =~ s/\./_/
    EcObjectPerlFetchList = $ecFetchStack:g
    CG_GREP_SPEC := $_ = '$' . $_
    EcObjectPerlFetchList = $EcObjectPerlFetchList:g:showstack

#%eecho EcObjectDbFetchList='$EcObjectDbFetchList'

    #for switch settings:
    EcObjectDbSwitchList    = $ecSwitchStack:showstack
    EcObjectPerlSwitchList = $ecSwitchStack:g:showstack
    EcObjectSwitchCount     = $ecSwitchStack:stacksize

    #create sprintf format for switch settings:
    #CG_GREP_SPEC := $_ = "{=EcObjectSwitchPrefix=}" . "$_" . "='%s'"
    #%evalmacro CG_GREP_SPEC CG_GREP_SPEC
    CG_GREP_SPEC := $_ = "$_" . "='%s'"
    %void $CG_STACK_DELIMITER:clr:nl:a
    EcObjectSwitchSprintfStr = $ecSwitchStack:g:showstack

#%eecho CG_GREP_SPEC=.$CG_GREP_SPEC.
#%eecho EcObjectSwitchSprintfStr=$EcObjectSwitchSprintfStr

    #write the collection implementation:
    templates/ecCollection_template.defs	m/ec${EcOjectNamePlural}_mthd.defs

    #write the object implementation:
    templates/ecObject_template.defs	m/ec${EcOjectName}_mthd.defs
}
//

clear_ec_defs := << //
{
    %undef /^EcObject*/
    %undef /^ecObject*/
    %undef /^ECOBJECT*/
    %undef /^_ECOBJECT*/
}
//

genProcedureStepMethods := << //
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = ProcedureStep
    EcOjectShortName= ProcStep
    ecobject_phrase = procedure step
    _ECOBJECT_PACKAGE = {=_ECPROCEDURESTEP_PACKAGE=}

    EcObjectDbTable        = ec_procedure_step
    EcObjectDbObjectKey    = procedure_id
    EcObjectDbSelectList   = name,id,property_sheet_id,actual_parameters_id
    EcObjectDbFetchList    = step_index,subprocedure,subproject,acl_id,always_run,broadcast,error_handling,exclusive_mode,log_file_name,parallel,release_mode,resource_name,shell,time_limit,time_limit_units,working_directory,workspace_name,command_clob_id,post_processor_clob_id,step_condition_clob_id,post_processor,step_condition,command

    %call generate_ec_methods
}
//

genScheduleMethods := << //
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = Schedule
    EcOjectShortName= Sched
    ecobject_phrase = schedule
    _ECOBJECT_PACKAGE       = $_ECSCHEDULE_PACKAGE:nameof:cgvar
    _ECOBJECT_PROPS_PACKAGE = $_ECPROPS_PACKAGE:nameof:cgvar

    EcObjectDbTable        = ec_schedule
    EcObjectDbObjectKey    = project_id
    EcObjectDbSelectList   = name,id,property_sheet_id,actual_parameters_id

EcObjectDbTableComment := << [
###########
#Attributes of interest in ec_schedule
#    id, version, name, begin_date, description, disabled, end_date,
#    run_interval, interval_units, misfire_policy, month_days,
#    priority, procedure_name, start_time, stop_time, time_zone, week_days,
#    acl_id, property_sheet_id, actual_parameters_id, description_clob_id, project_id
###########
]

    #####
    #note - we don't need to refetch data in EcObjectDbSelectList or description related fields.
    #####
    EcObjectDbFetchList := << [
project_id, procedure_name, version, begin_date, disabled, end_date,
run_interval, interval_units, misfire_policy, month_days,
priority, start_time, stop_time, time_zone, week_days
]

    #list of fields to be treated as switches, go in *.settings file
    EcObjectDbSwitchList := << [
begin_date, disabled, end_date,
run_interval, interval_units, misfire_policy, month_days,
priority, start_time, stop_time, time_zone, week_days
]
    %call generate_ec_methods
}
//

genCloudMethods := << //
#just using this to set names... not a collection of objects pattern - just a collection
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = Cloud
    EcOjectShortName= Cloud
    ecobject_phrase = Cloud
    _ECOBJECT_PACKAGE       = $_ECCLOUD_PACKAGE:nameof:cgvar
    _ECOBJECT_PROPS_PACKAGE = $_ECPROPS_PACKAGE:nameof:cgvar

    EcObjectDbTable        = ec_cloud
    EcObjectDbObjectKey    = cloud_name

    #not used
    EcObjectDbSelectList   = NULL
    EcObjectDbTableComment = NULL
    EcObjectDbFetchList    = NULL
    EcObjectDbSwitchList   = NULL
    %call generate_ec_methods_top_entity
}
//

genResourceMethods := << //
{
    %call clear_ec_defs

    #base definitions:
    EcOjectName     = Resource
    EcOjectShortName= Rsrc
    ecobject_phrase = resource
    _ECOBJECT_PACKAGE       = $_ECRESOURCE_PACKAGE:nameof:cgvar
    _ECOBJECT_PROPS_PACKAGE = $_ECPROPS_PACKAGE:nameof:cgvar

    EcObjectDbTable        = ec_resource
    EcObjectDbObjectKey    = resource_name
    EcObjectDbSelectList   = name,id,property_sheet_id

EcObjectDbTableComment := << [
###########
#Attributes of possible interest in ec_resource
#    id, version, name, deleted, owner, description, repository_names,
#    disabled, shell, step_limit, workspace_name, acl_id, property_sheet_id,
#    agent_id, description_clob_id, repository_names_clob_id, job_id, job_step_id
#Attributes of possible interest in ec_agent
#    id, version, artifact_cache_directory, proxy_customization, host_name, port,
#    proxy_host_name, proxy_port, proxy_protocol, usessl, signature,
#    status_agent_version, status_code, status_created, status_created_millis,
#    status_generation, status_message, status_ping_token, status_protocol_version,
#    status_state, proxy_customization_clob_id
###########
]

    #####
    #note - we don't need to refetch data in EcObjectDbSelectList or description related fields.
    #####

    EcObjectDbFetchList := << [
rsrc.name, rsrc.version, rsrc.deleted, rsrc.owner, rsrc.disabled, rsrc.shell, rsrc.step_limit, rsrc.workspace_name,
rsrc.property_sheet_id, rsrc.agent_id, rsrc.repository_names_clob_id, rsrc.repository_names,
agent.id, agent.version, agent.host_name, agent.port, agent.proxy_host_name, agent.proxy_port, agent.proxy_protocol, agent.usessl, agent.signature
]

    EcObjectDbFetchFromClause  := ec_agent agent, ec_resource rsrc
    EcObjectDbFetchWhereClause := rsrc.id = %d and rsrc.agent_id = agent.id

    #list of fields to be treated as switches, go in *.settings file
    EcObjectDbSwitchList := << [
rsrc_name,
rsrc_version,
rsrc_deleted,
rsrc_owner,
rsrc_disabled,
rsrc_shell,
rsrc_step_limit
agent_version,
agent_host_name,
agent_port,
agent_proxy_host_name,
agent_proxy_port,
agent_proxy_protocol,
agent_usessl,
agent_signature
]
    %call generate_ec_methods
}
//

##################################### MAIN #####################################

CG_FOREACH_SPLIT_PATTERN = /,/
generateList = genProcedureStepMethods,genScheduleMethods,genResourceMethods
generateList = genResourceMethods,genCloudMethods

%foreach generator generateList %call $generator
