%include build_setup.defs

# ecdump.pl - prlskel program derived from template: perl/prlskel.ptpl

{ ### ecdump defs
%ifndef PL_PACKAGE       PL_PACKAGE = $ECDUMP_PACKAGE
PL_PACKAGE_DESCRIPTION = Main driver for ecdump - a tool to dump the Electric Commander database in a form that can be checked into an SCM

{
#external packages:
PL_EXTERN_PKG_IMPORTS = << [
use Config;
require "sqlpj.pl";
require "os.pl";
]

#local packages:
PL_PKG_IMPORTS = << [
use $_PKGCONFIG_PACKAGE;
use $_ECDUMPIMPL_PACKAGE;
require $_UTILS_PACKAGE;
]
%if    $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS:rnewline
%ifnot $GEN_ONE_MODULE   PL_PKG_IMPORTS = ${PL_EXTERN_PKG_IMPORTS:rnewline}$PL_PKG_IMPORTS
}

{
PL_PKG_ATTRIBUTES := << [
{=_UTILS_PACKAGE=}->import;

my $edmpcfg = new {=_PKGCONFIG_PACKAGE=}();

#sqlpj config object:
my $scfg    = new {=_SQLPJ_CONFIG_PACKAGE=}();

#this will be initialized after configuration is set up:
my $ecdumpImpl = undef;

#file containing list of projects:
my $PJLIST = undef;

#default ignore list for property sheets that we do not traverse.
#user can override this list via ECDUMP_IGNORES env. var
my %DefaultIgnorePropSheets = (
    'buildNumbers'      => 0,
    'buildResults'      => 0,
    'ec_savedSearches'  => 0,
    'ecscm_snapshots'   => 0,
    'jobsForReaping'    => 0,
);

#this is just for the usage message:
my $DefaultIgnorePropSheets = join(';', sort keys %DefaultIgnorePropSheets);

#set up based on environment:
my %IgnorePropSheets = ();
]
%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}
}

{
PL_MAIN := << //

#we handle our own signals:
$SIG{'INT'}  = '{=_PL_PACKAGE=}::rec_signal';
$SIG{'KILL'} = '{=_PL_PACKAGE=}::rec_signal';
$SIG{'QUIT'} = '{=_PL_PACKAGE=}::rec_signal';
$SIG{'TERM'} = '{=_PL_PACKAGE=}::rec_signal';
$SIG{'HUP'}  = '{=_PL_PACKAGE=}::rec_signal';
$SIG{'TRAP'} = '{=_PL_PACKAGE=}::rec_signal';

#if we get to here, arguments have been parsed and checked.

my $sqlpjImpl = new {=_SQLPJ_IMPL_PACKAGE=}($edmpcfg->getSqlpjConfig());
$edmpcfg->setSqlpjImpl($sqlpjImpl);

#######
#create implementation class, passing in our configuration:
#######
$ecdumpImpl = new {=_ECDUMPIMPL_PACKAGE=}($edmpcfg);

#initialize our driver class:
if (!$sqlpjImpl->check_driver()) {
    printf STDERR "%s:  ERROR: JDBC driver '%s' is not available for url '%s', user '%s', password '%s'\n",
        $pkgname, $ecdumpImpl->jdbcDriver(), $ecdumpImpl->getJdbcUrl(), $ecdumpImpl->user(), $ecdumpImpl->password();
    return 1;
}

#####
#call ecdump implementation:
#####
return $ecdumpImpl->execEcdump();

//
%evalmacro PL_MAIN PL_MAIN
}

{ #subroutines
PL_PKG_METHODS := << //
sub checkSetClasspath
#if we have a classpath setting, then add to the environemnt.
#
#NOTE:  inline java will ignore any new CLASSPATH setting after
#       the module is loaded.  A work-around is to use "require" to load it.
{
    my ($cfg) = @_;

#printf STDERR "BEFORE CLASSPATH='%s'\n", $ENV{'CLASSPATH'};
    if (defined($cfg->getJdbcClassPath())) {
        if (defined($ENV{'CLASSPATH'}) && $ENV{'CLASSPATH'} ne "") {
            $ENV{'CLASSPATH'} = sprintf("%s%s%s", $cfg->getJdbcClassPath(), $cfg->getPathSeparator(), $ENV{'CLASSPATH'});
        } else {
            $ENV{'CLASSPATH'} = $cfg->getJdbcClassPath();
        }
    }
#printf STDERR "AFTER CLASSPATH='%s'\n", $ENV{'CLASSPATH'};
}

sub checkJdbcSettings
#return true(1) if jdbc properties are all defined.
{
    my ($cfg) = @_;
    my $errs = 0;

    if (!defined($cfg->getJdbcDriverClass())) {
        ++$errs; printf STDERR "%s:  missing JDBC driver class\n", $p;
    }
    if (!defined($cfg->getJdbcUrl())) {
        ++$errs; printf STDERR "%s:  missing JDBC URL\n", $p
    }
    if (!defined($cfg->getJdbcUser())) {
        ++$errs; printf STDERR "%s:  missing JDBC User name\n", $p;
    }
    if (!defined($cfg->getJdbcPassword())) {
        ++$errs; printf STDERR "%s:  missing JDBC User password\n", $p;
    }

    return($errs == 0);
}

sub parseEcdumpIgnores
#parse ECDUMP_IGNORE environment variable if it is defined:
#returns a reference to the ignore hash.
{
    if (defined($ENV{'ECDUMP_IGNORES'})) {
        my @ignores = split(';', $ENV{'ECDUMP_IGNORES'});

        if ($#ignores >= 0) {
            #set global IgnorePropSheets to contents of ECDUMP_IGNORES:
            %IgnorePropSheets = map {
                $_, 0;
            } @ignores;
        } else {
            printf STDERR "%s: WARNING:  ECDUMP_IGNORES defined, but empty - setting default ignores.\n", $p;
            %IgnorePropSheets = %DefaultIgnorePropSheets;
        }
    } else {
        %IgnorePropSheets = %DefaultIgnorePropSheets;
    }

    return \%IgnorePropSheets;
}

sub rec_signal
# we only want to abort sqlexec in progress, not program.
{
    local($SIG) = @_;
    my($prevHandler) = $SIG{$SIG};

    # Reestablish the handler.
    $SIG{$SIG} = $prevHandler;
    printf STDERR ("\n%s:  Received SIG%s%s\n", $p, $SIG, ($SIG eq "HUP")? " - IGNORED" : "");

    #note - this calls my cleanup:
    main::abort("Shutting down.\n");
}
//
}

{
PL_USAGE := << [
Usage:  $pkgname [options] [project_names]

SYNOPSIS
  Connect to an Electric Commander database and dump named EC projects,
  including procedure and property hierarchy.

  If -dump is specified, and no projects are named, then dump all projects.

OPTIONS
  -help             Display this help message.
  -V                Show the $pkgname version.
  -verbose          Display additional informational messages.
  -debug            Display debug messages.
  -ddebug           Display deep debug messages.
  -quiet            Display severe errors only.

  -list             List all projects and exit.
  -dump dirname     Dump any named projects, output rooted at <dirname>.
  -P file           Dump only the projects listed in <file>.
  -clean            Remove <dirname> prior to dump.

  -indexsteps       Add index prefixes to dump of procedure step names dirs, e.g. "01_foostep"
  -addhtml          Decorate dump with browser-friendly html indexes.

                    ===============
                    JDBC PROPERTIES
                    ===============
  -props file       A java property file containing the JDBC connection parameters.
                    The following property keys are recognized:

                        JDBC_CLASSPATH, JDBC_DRIVER_CLASS,
                        JDBC_URL, JDBC_USER, JDBC_PASSWORD

  -classpath string Classpath containing the JDBC driver (can be a single jar).
  -driver classname Name of the driver class
  -url name         Jdbc connection url
  -user name        Username used for connection
  -password string  Password for this user

ENVIRONMENT

  ECDUMP_IGNORES    List of EC property sheet names to ignore, delimited by semi-colons.
  DEFAULT: ECDUMP_IGNORES="$DefaultIgnorePropSheets"

  CLASSPATH         Java CLASSPATH, inherited by JDBC.pm

  PERL_INLINE_JAVA_EXTRA_JAVA_ARGS
                    Extra args for java vm, e.g. -Xmx1024m to increase memory.

EXAMPLES
  Initialize JDBC properties and dump EC projects to directory `ecbackup'.
      $pkgname -props ~/.jdbc/lcommander.props ecbackup

SEE ALSO
 sqlpj(1) - used to provide database connectivity via JDBC.

]

%evalmacro PL_USAGE PL_USAGE
}

{
PL_PARSE_ARGS_PRE := << [
#set defaults:
$edmpcfg->setProgName($p);
$edmpcfg->setPathSeparator($Config{path_sep});
]
%evalmacro PL_PARSE_ARGS_PRE PL_PARSE_ARGS_PRE

{
{ #balance braces
#note standard flags added at end of loop in template:  -q,-v,-ddebug,-debug
PL_PARSE_ARGS_LOOP := << [
} elsif ($flag =~ '^-V') {
    # -V                show version and exit
    printf STDOUT "%s, Version %s, %s.\n",
        $edmpcfg->getProgName(), $edmpcfg->versionNumber(), $edmpcfg->versionDate();
    $HELPFLAG = 1;   #this forces exit.
    return 0;
} elsif ($flag =~ '^-addhtml') {
    # -addhtml          Decorate dump with browser-friendly html indexes.
    $edmpcfg->setHtmlDecorationOption(1);
    printf STDERR "%s: TODO:  implement -addhtml option.\n", $p;
} elsif ($flag =~ '^-indexsteps') {
    # -indexsteps             add index prefixes to all procedure step names, e.g. "01_foostep"
    $edmpcfg->setIndexProcedureStepNameOption(1);
} elsif ($flag =~ '^-list') {
    # -list             List all projects and exit.
    $edmpcfg->setHaveListCommand(1);
} elsif ($flag =~ '^-clean') {
    # -clean            Remove <dirname> prior to dump.
    $edmpcfg->setDoClean(1);
} elsif ($flag =~ '^-dump') {
    # -dump dirname     Dump named projects, output rooted at <dirname>.
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setOutputDirectory(shift @ARGV);
        $edmpcfg->setHaveDumpCommand(1),
    } else {
        printf STDERR "%s:  -dump requires directory name.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-P') {
    # -P file - get the list of projects to dump from <file>
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $PJLIST = shift @ARGV;
    } else {
        printf STDERR "%s:  -P requires file containing list of projects to dump.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-user') {
    # -user name        Username used for connection
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcUser(shift(@ARGV));
    } else {
        printf STDERR "%s:  -user requires user name.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-pass') {
    # -password string  Password for this user
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcPassword(shift(@ARGV));
    } else {
        printf STDERR "%s:  -password requires password string.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-driver') {
    # -driver classname Name of the driver class
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcDriverClass(shift(@ARGV));
    } else {
        printf STDERR "%s:  -driver requires driver class name.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-classpath') {
    # -classpath string Classpath containing the JDBC driver (can be a single jar).
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcClassPath(shift(@ARGV));
    } else {
        printf STDERR "%s:  -classpath requires classpath setting.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-props') {
    # -props <file>        Set JDBC connection properties from <file>
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcPropsFileName(shift(@ARGV));
    } else {
        printf STDERR "%s:  -props requires a file name containing JDBC connection properties.\n", $p;
        return 1;
    }
} elsif ($flag =~ '^-url') {
    # -url name         Jdbc connection url
    if ($#ARGV+1 > 0 && $ARGV[0] !~ /^-/) {
        $edmpcfg->setJdbcUrl(shift(@ARGV));
    } else {
        printf STDERR "%s:  -url requires the JDBC connection url\n", $p;
        return 1;
    }
]
} #balance braces
} #end of parse arg loop defs
#%evalmacro PL_PARSE_ARGS_LOOP PL_PARSE_ARGS_LOOP

PL_PARSE_ARGS_POST := << [
#set debug, verbose options:
$edmpcfg->setDebug($DEBUGFLAG);
$edmpcfg->setDDebug($DDEBUGFLAG);
$edmpcfg->setQuiet($QUIET);
$edmpcfg->setVerbose($VERBOSE);

$edmpcfg->setIgnorePropertiesHash(parseEcdumpIgnores());

#eliminate empty args (this happens on some platforms):
@ARGV = grep(!/^$/, @ARGV);

#if we have a file containing list of projects, process that first:
my @plist = ();

if ($PJLIST) {
    if (!-r $PJLIST) {
        printf STDERR "%s:  cannot read project list from '%s'\n", $p, $PJLIST;
        return 1;
    }

    #othewise, see if we can open it:
    my $tmp = "";
    if (os::read_file2str(\$tmp, $PJLIST) != 0) {
        printf STDERR "%s:  cannot read project list from '%s'\n", $p, $PJLIST;
        return 1;
    }

    @plist = split(/[\r\n]/, $tmp);

    #eliminate empty or commented lines:
    @plist = grep(!/^\s*$/, @plist);    #empty or blank lines
    @plist = grep(!/^\s*#/, @plist);    #comments
}

#do we have a list of projects?
push @plist, @ARGV if ($#ARGV >= 0);

if ($#plist >= 0) {
    $edmpcfg->setProjectList(@plist);
    $edmpcfg->setHaveProjects(1);
    $edmpcfg->setDumpAllProjects(0);
}


if ($edmpcfg->getHaveDumpCommand() && $edmpcfg->getHaveListCommand()) {
    printf STDERR "%s: WARN:  -dump and -list specified - will do -list only.\n", $p unless($QUIET);
    $edmpcfg->setHaveDumpCommand(0);
}

if ($edmpcfg->getHaveDumpCommand() && !$edmpcfg->getHaveProjects()) {
    printf STDERR "%s: INFO:  dump specified, but no projects specified - will dump all projects.\n", $p unless($QUIET);
    $edmpcfg->setDumpAllProjects(1);
}

if ($edmpcfg->getHtmlDecorationOption() && $edmpcfg->getIndexProcedureStepNameOption(1)) {
    printf STDERR "%s: WARN:  -indexsteps and -addhtml specified - will do -addhtml only.\n", $p unless($QUIET);
    $edmpcfg->setIndexProcedureStepNameOption(0);
}

#####
# this doesn't work here - had to make it global.  no idea why.  RT 2/15/13
#   my $scfg = new {=_SQLPJ_CONFIG_PACKAGE=}();
#   get:  Undefined subroutine &sqlpj::pkgconfig
#####

$edmpcfg->initSqlpjConfig($scfg);

#check the JDBC configuration:
if (!$edmpcfg->getSqlpjConfig->checkJdbcSettings()) {
    printf STDERR "%s:  one or more JDBC connection settings are missing or incomplete - ABORT.\n", $p;
    return 1;
}

#add to the CLASSPATH if required:
$edmpcfg->getSqlpjConfig->checkSetClasspath();

#initialize util debug settings:
init_utils($edmpcfg);
]
%evalmacro PL_PARSE_ARGS_POST PL_PARSE_ARGS_POST

} #end of parse arg defs

PL_CLEANUP_ROUTINE := << [
printf STDERR "%s:  clean-up has been called!\n", $p if ($DEBUGFLAG);
if (defined($ecdumpImpl)) {
    $ecdumpImpl->cleanup();
}
]
%evalmacro PL_CLEANUP_ROUTINE PL_CLEANUP_ROUTINE
