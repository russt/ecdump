sub execEcdump
#execute the ec dump command.
#by the time we get here, all arguments are parsed, checked, and stored in my config() object,
#the database connectivity is checked, and we are ready to run.
#returns 0 on success, non-zero othewise.
{
    my ($self) = @_;
    my ($sqlpj) = $self->sqlpj();

    if (!$self->haveListCommand() && !$self->haveDumpCommand()) {
        printf STDERR "%s:  nothing to do - please specify a list or dump command.\n", ::srline();
        return 0;
    }

    ##########
    #otherwise, initialize the database connection and execute the command:
    ##########

    #tell sqlpj to always make results available via getQueryResult() instead of displaying on stdout:
    $sqlpj->setOutputToList(1);

    if (!$sqlpj->sql_init_connection()) {
        printf STDERR "%s:  cannot get a database connection:  ABORT\n", ::srline();
        return 1;
    }

    #initialize the EcProjects object:
    my $ecprojects = $self->ecProjects();

    if ($self->haveListCommand() || $self->dumpAllProjects()) {
        $ecprojects->addAllProjects();
    } else {
        for my $pjname ($self->projectList()) {
            $ecprojects->addOneProject($pjname);
        }
    }

    if ($self->haveListCommand()) {
        return $self->processListCommand();
    }
    
    #otherwise, we have a dump command:
    return $self->processDumpCommand();
}

sub processDumpCommand
#process dump command.  return 0 on success.
{
    my ($self) = @_;

    my $ecprojects = $self->ecProjects();

    printf STDERR "Running DUMP COMMAND...\n" if $DEBUG;

    if ($self->doClean()) {
        if ($self->cleanOutputDir() != 0) {
            printf STDERR "%s: ERROR: clean output directory step failed, aborting dump.\n", ::srline();
            return 1;
        }
    }

    #now create output directory:
    if ($self->createOutputDir() != 0) {
        printf STDERR "%s: ERROR: create output directory step failed, aborting dump.\n", ::srline();
        return 1;
    }

    #tell ecProjects to dump istself:
    return $ecprojects->dumpProjects();
}

sub processListCommand
#process list command.  return 0 on success.
{
    my ($self) = @_;
    my $ecprojects = $self->ecProjects();

    #tell ecProjects to list itself:
    return $ecprojects->listProjectNames();

}

sub cleanOutputDir
#remove the output directory.  return 0 if successful.
{
    my ($self) = @_;
    my $theDir = $self->outputDirectory();

    printf STDERR "Cleaning output dir '%s'...\n", $theDir if $DEBUG;

    return 0;
}

sub createOutputDir
#create the output directory.  return 0 if successful.
{
    my ($self) = @_;
    my $theDir = $self->outputDirectory();

    printf STDERR "Creating output dir '%s'...\n", $theDir if $DEBUG;

    return 0;
}
