#see also:  ecdumpImpl.defs
sub execEcdump
#execute the ec dump command.
#by the time we get here, all arguments are parsed, checked, and stored in my config() object,
#the database connectivity is checked, and we are ready to run.
#returns 0 on success, non-zero othewise.
{

    my ($self) = @_;
    my $outroot = $self->rootDir();

    if (!$self->haveListCommand() && !$self->haveDumpCommand()) {
        printf STDERR "%s:  nothing to do - please specify a list or dump command.\n", $self->progName();
        return 0;
    }

    #output directory is defined only if we are dumping:
    if ($self->haveDumpCommand()) {
        if ($self->doClean()) {
            if ($self->cleanOutputDir() != 0) {
                printf STDERR "%s: ERROR: clean output directory step failed. ABORT\n", $self->progName();
                return 1;
            }
        } else {
            if (-d $outroot) {
                #this can give unpredictable results - warn the user.  RT 3/21/13
                printf STDERR "%s: WARNING: dumping to existing directory '%s', use -clean to remove.\n",
                    $self->progName(), $outroot unless ($QUIET);
            }
        }

        #now create output directory:
        if ($self->createOutputDir() != 0) {
            printf STDERR "%s: ERROR: create output directory step failed. ABORT\n", $self->progName();
            return 1;
        }
    }

    #initialize db connection if yet not done:
    if (!$self->getDbConnectionInitialized()) {
        printf STDERR "Initializing database connection ...\n"  if $VERBOSE;
        if ($self->initDbConnection() != 0) {
            printf STDERR "%s: ERROR: cannot get a database connection. ABORT\n", $self->progName();
            return 1;
        }
    }

    #cache handle for EcProjects object:
    my $ecprojects = $self->ecProjects();

    my $nerrs = 0;

    if ($self->haveListCommand() || $self->dumpAllProjects()) {
        $nerrs += $ecprojects->addAllProjects();
    } else {
        for my $pjname ($self->projectList()) {
            $nerrs += $ecprojects->addOneProject($pjname);
        }
    }

    if ($nerrs) {
        printf STDERR "%s:  encounterd %d ERROR%s while adding projects. ABORT\n", $self->progName(), $nerrs, ($nerrs == 1 ? '' : 'S');
        return 1;
    }

    if ($self->haveListCommand()) {
        return $self->processListCommand();
    }
    
    #otherwise, we have a dump command:
    return $self->processDumpCommand();
}

sub processDumpCommand
#process dump command.  return 0 on success.
{
    my ($self) = @_;
    my $eccloud = $self->ecCloud();
    my $ecprojects = $self->ecProjects();

    #load/dump ecCloud first because it is fast::
    if ($eccloud->loadCloud(0) != 0) {
        printf STDERR "%s: ERROR: failed to load EC cloud resources!\n", ::srline();
        return 1;
    }
    if ($eccloud->dumpCloud(0) != 0) {
        printf STDERR "%s: ERROR: failed to dump EC cloud resources!\n", ::srline();
        return 1;
    }

    if ($self->dumpCloudOnly()) {
        printf STDERR "WARNING:  not dumping projects because -cloudonly was specified.\n"  if $VERBOSE;
        return 0;
    }

    #tell ecProjects to load and dump projects one at a time:
    if ($ecprojects->loadDumpProjects(0) != 0) {
        printf STDERR "%s: ERROR: failed to dump one or more projects!\n", ::srline();
        return 1;
    }

    return 0;
}

sub processListCommand
#process list command.  return 0 on success.
{
    my ($self) = @_;
    my $ecprojects = $self->ecProjects();

    #tell ecProjects to list itself:
    return $ecprojects->listProjectNames();
}

sub initDbConnection
#initialize the database connection and execute the command.
{
    my ($self) = @_;
    my $sqlpj = $self->sqlpj();

    if (!$sqlpj->sql_init_connection()) {
        printf STDERR "%s: ERROR:  failed to get a database connection.\n", ::srline();
        return 1;
    }

    #tell sqlpj to always make results available via getQueryResult() instead of displaying on stdout:
    $sqlpj->setOutputToList(1);

    $self->setDbConnectionInitialized(1);
    return 0;
}

sub cleanOutputDir
#remove the output directory.  return 0 if successful.
{
    my ($self) = @_;
    my $outroot = $self->rootDir();

    printf STDERR "Deleting output dir '%s'...\n", $outroot if $VERBOSE;

    if (-d $outroot) {
        os::rm_recursive($outroot);
        if (-d $outroot) {
            printf STDERR "%s:  ERROR: can't remove output dir, '%s'\n", ::srline(), $outroot;
            return 1;
        }
    } elsif (-e $outroot) {
        #plain file or symlink, use less firepower:
        os::rmFile($outroot);
        if (-e $outroot) {
            printf STDERR "%s:  ERROR: can't remove '%s'\n", ::srline(), $outroot;
            return 1;
        }
    }

    return 0;
}

sub createOutputDir
#create the output directory.  return 0 if successful.
{
    my ($self) = @_;
    my $outroot = $self->rootDir();

    if (!-d $outroot) {
        printf STDERR "Creating output dir '%s'...\n", $outroot if $VERBOSE;

        os::createdir($outroot, 0775);
        #if still not there...
        if (!-d $outroot) {
            printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
            return 1;
        }
    }
    return 0;
}

sub cleanup
#call sqlpj cleanup.
{
    my ($self) = @_;
    $self->sqlpj->cleanup();
} 
