#see also:  ecSchedule.defs
sub loadSchedule
#load this schedule.
{
    my ($self) = @_;
    my($name, $id) = ($self->scheduleName(), $self->scheduleId());
    my $outroot = $self->rootDir();

    #first load this schedule:
    printf STDERR "LOADING SCHEDULE (%s,%s)\n", $name, $id  if ($DDEBUG);

    #get my description (method defined in ecProjects):
    $self->fetchDescription('ec_schedule', $id);

    #get my content:
    $self->fetchSchedContent($name, $id);

    #load my actual parameters:
    #$self->ecActualParameters->loadActualParameters();

    #load my properties:
    #$self->ecProps->loadProps();

    return 0;
}

sub dumpSchedule
#dump this schedule.
#return 0 on success
{
    my ($self, $indent) = @_;
    my $outroot = $self->rootDir();

    #first dump this schedule:
    printf STDERR "%sDUMPING SCHEDULE (%s,%s) -> %s\n", ' 'x$indent, $self->scheduleName, $self->scheduleId, $outroot if ($DEBUG);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #write my description out:
    $self->dumpDescription();

    #write my content out:
    $self->dumpSchedContent();

    #dump my actual parameters:
    #$self->ecActualParameters->dumpActualParameters();

    #dump my properties:
    #$self->ecProps->dumpProps($indent+2);

    return 0;
}

sub dumpSchedContent
#write the schedule content to files.
#return 0 if successful
{
    my ($self) = @_;
    my ($errs) = 0;

    #$errs += $self->dumpSchedSwitches();

    return $errs;
}

sub dumpSchedSwitches
#write the misc. schedule properties
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getSwitchText();
    my $contentfn = $self->switchTextFname();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->rootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, $contentfn));
}

sub fetchSchedContent
#fetch the schedule content for a given schedule id.
#return 0 if successful
{
    my ($self, $name, $id) = @_;
    my ($sqlpj) = $self->sqlpj();

    #this query should return only one row:
    my $lbuf = sprintf("select name,id,property_sheet_id,actual_parameters_id from ec_schedule where id=%d", $id);

    printf STDERR "%s: running sql query to get schedule content fields\n", ::srline() if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect one row
    } @{$sqlpj->getQueryResult()};

    if ( $#results+1 != 4 ) {
        printf STDERR "%s:  ERROR:  query '%s' returned wrong number of results (%d).\n", ::srline(), $lbuf, $#results+1;
        return 1;
    }

    #map undefined values:
    @results = map {
        defined($_) ? $_ : '';
    } @results;

    my ($name,$id,$property_sheet_id,$actual_parameters_id) = @results;

    #$self->setDDebug(1);
    printf STDERR "%s: (name,id,property_sheet_id,actual_parameters_id)=(%s)\n", ::srline(), join(',', ($name,$id,@results)) if ($DDEBUG);
    #$self->setDDebug(0);

    return 0;
}
