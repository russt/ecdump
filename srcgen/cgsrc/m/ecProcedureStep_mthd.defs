#see also:  ecProcedureStep.defs
sub loadProcedureStep
#load this procedure step.
{
    my ($self) = @_;
    my($name, $id) = ($self->procedureStepName(), $self->procedureStepId());
    my $outroot = $self->getRootDir();
    my $addStepIndex = $self->indexProcedureStepNames();

    #first load this Procedure Step:
    printf STDERR "LOADING PROCEDURE STEP (%s,%s)\n", $name, $id  if ($DDEBUG);

    #get my description (method defined in ecProjects):
    $self->fetchDescription('ec_procedure_step', $id);

    #get my content:
    $self->fetchProcStepContent($name, $id);

    #this is not valid until the fetch:
    my $step_index = $self->getProcStepIndex();

    #now we can finally set RootDir:
    if ($addStepIndex) {
        $self->setRootDir(path::mkpathname($outroot, sprintf("%02d_%s", $step_index, ec2scm($name))));
    } else {
        $self->setRootDir(path::mkpathname($outroot, ec2scm($name)));
    }

    #$self->setDDebug(1);
    printf STDERR "%s: outroot:  '%s'->'%s'\n", ::srline(), $outroot, $self->getRootDir() if ($DDEBUG);
    #$self->setDDebug(0);


    #### we had to delay creating our sub-objects until root was set. ###
    my ($psid, $apid) = ($self->propertySheetId(), $self->actualParametersId());

    #create properties container object, which will contain the list of our properties:
    $self->{'mEcProps'} = new {=_ECPROPS_PACKAGE=}($self, $psid);

    #create parameters container object, which will contain the list of our formal parameters:
    $self->{'mEcParameters'} = new {=_ECPARAMETERS_PACKAGE=}($self, $name, $id, 'ec_procedure_step_parameter', 'procedure_step_id');

    #create actual parameters container object, which in actuality is a list of properties:
    $self->{'mEcActualParameters'} = new {=_ECPROPS_PACKAGE=}($self, $apid, "actualparameters", "parametervalue");

    #load my formal parameters (most steps do not have):
    #$self->ecParameters->setDDebug(1);
    $self->ecParameters->loadParameters();
    #$self->ecParameters->setDDebug(0);

    #load my actual parameters:
    $self->ecActualParameters->loadActualParameters();

    #load my properties:
    $self->ecProps->loadProps();

    return 0;
}

sub dumpProcedureStep
#dump this procedure step.
#return 0 on success
{
    my ($self, $indent) = @_;
    my $outroot = $self->getRootDir();

    #first dump this Procedure Step:
    printf STDERR "%sDUMPING PROCEDURE STEP (%s,%s) -> %s\n", ' 'x$indent, $self->procedureStepName, $self->procedureStepId, $outroot   if ($DEBUG);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #write my description out:
    $self->dumpDescription();

    #write my content out:
    $self->dumpProcStepContent();

    #dump my formal parameters: 
    #skip this step for now as these are not really used.  RT 3/19/13
    #$self->ecParameters->dumpParameters($indent+2);

    #dump my actual parameters:
    $self->ecActualParameters->dumpActualParameters();

    #dump my properties:
    $self->ecProps->dumpProps($indent+2);

    return 0;
}

sub dumpProcStepContent
#write the property content to a file called content.
#return 0 if successful
{
    my ($self) = @_;
    my ($errs) = 0;

    $errs += $self->dumpProcStepCommand();
    $errs += $self->dumpProcStepPostProcessor();
    $errs += $self->dumpProcStepSubprocedure();
    $errs += $self->dumpProcStepSwitches();

    return $errs;
}

sub dumpProcStepCommand
#write the proc step command to a file called command
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getProcStepCommand();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->getRootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, "command"));
}

sub dumpProcStepPostProcessor
#write the proc step command to a file called command
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getProcStepPostProcessor();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->getRootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, "postprocessor"));
}

sub dumpProcStepSubprocedure
#write the subprocedure call to a file called subprocedure
#return 0 if successful
{
    my ($self) = @_;
    my $subprocedure = $self->getProcStepSubprocedure();
    my $subproject   = $self->getProcStepSubproject();
    my $txt = $subprocedure;

    #don't create empty files:
    return 0 if ($txt eq '');

    if ($subprocedure ne '' && $subproject ne '') {
        $txt = sprintf("%s/%s", $subproject, $subprocedure);
    }

    my $outroot = $self->getRootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, "subprocedure"));
}

sub dumpProcStepSwitches
#write the misc. parameter properties
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getSwitchText();
    my $contentfn = $self->switchTextFname();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->rootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, $contentfn));
}

sub fetchProcStepContent
#fetch the procedure step content for a given procedure step id.
#return 0 if successful
{
    my ($self, $name, $id) = @_;
    my ($sqlpj) = $self->sqlpj();

    #these are results:
    $self->setProcStepCommand('');
    $self->setProcStepPostProcessor('');

    # ec_procedure_step partial schema:
    #(id, name, exclusive_mode, release_mode, always_run, broadcast, command, step_condition,
    # description, post_processor, error_handling, log_file_name, parallel, resource_name,
    # shell, subprocedure, subproject, time_limit, time_limit_units, working_directory, workspace_name,
    # acl_id, property_sheet_id, actual_parameters_id, command_clob_id, step_condition_clob_id,
    # description_clob_id, post_processor_clob_id, procedure_id, step_index)

    #this query should return only one row:
    my $lbuf = sprintf("select
        step_index,
        subprocedure,
        subproject,
        acl_id,
        always_run,
        broadcast,
        error_handling,
        exclusive_mode,
        log_file_name,
        parallel,
        release_mode,
        resource_name,
        shell,
        time_limit,
        time_limit_units,
        working_directory,
        workspace_name,
        command_clob_id,
        post_processor_clob_id,
        step_condition_clob_id,
        post_processor,
        step_condition,
        command
from ec_procedure_step
where id=%d", $id);

    printf STDERR "%s: running sql query to get procedure step content fields\n", ::srline() if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect one row
    } @{$sqlpj->getQueryResult()};

    if ( $#results+1 != 23 ) {
        printf STDERR "%s:  ERROR:  query '%s' returned wrong number of results (%d).\n", ::srline(), $lbuf, $#results+1;
        return 1;
    }

    #map undefined values:
    @results = map {
        defined($_) ? $_ : '';
    } @results;

    my ($step_index,
        $subprocedure,
        $subproject,
        $acl_id,
        $always_run,
        $broadcast,
        $error_handling,
        $exclusive_mode,
        $log_file_name,
        $parallel,
        $release_mode,
        $resource_name,
        $shell,
        $time_limit,
        $time_limit_units,
        $working_directory,
        $workspace_name,
        $command_clob_id,
        $post_processor_clob_id,
        $step_condition_clob_id,
        $post_processor,
        $step_condition,
        $command) = @results;

    #$self->setDDebug(1);
    printf STDERR "%s: (step_index,subprocedure,subproject,acl_id,always_run,broadcast,error_handling,exclusive_mode,log_file_name,parallel,release_mode,resource_name,shell,time_limit,time_limit_units,working_directory,workspace_name,command_clob_id,post_processor_clob_id,step_condition_clob_id,post_processor,step_condition,command)=(%s)\n",
        ::srline(), join(',', ($name,$id,@results)) if ($DDEBUG);
    #$self->setDDebug(0);

    #Note:  if we have a string and a clob, we prefer the clob, which is the full content

    if ($command_clob_id ne '') {
        my $clobtxt = '';
        if ($self->fetchClobText(\$clobtxt, $command_clob_id) != 0) {
            printf STDERR "%s:  ERROR:  failed to fetch command_clob='%s' for %s[%s]\n", ::srline(), $command_clob_id, "ec_procedure step", $id;
            return 1;
        }
        $self->setProcStepCommand($clobtxt);
    } elsif ($command ne '') {
        $self->setProcStepCommand($command);
    }

    #now set postprocessor text if it exists:
    if ($post_processor_clob_id ne '') {
        my $clobtxt = '';
        if ($self->fetchClobText(\$clobtxt, $post_processor_clob_id) != 0) {
            printf STDERR "%s:  ERROR:  failed to fetch post_processor_clob='%s' for %s[%s]\n", ::srline(), $post_processor_clob_id, "ec_procedure step", $id;
            return 1;
        }
        $self->setProcStepPostProcessor($clobtxt);
    } elsif ($post_processor ne '') {
        $self->setProcStepPostProcessor($post_processor);
    }

    #set subprocedure, subproject:
    $self->setProcStepSubprocedure($subprocedure);
    $self->setProcStepSubproject($subproject);

    #set step index for procedure step:
    $self->setProcStepIndex($step_index);

    #create switches text (in a form that can be consumed by a posix shell):
    my $switches=sprintf("procstep_always_run='%s'
procstep_broadcast='%s'
procstep_error_handling='%s'
procstep_exclusive_mode='%s'
procstep_log_file_name='%s'
procstep_parallel='%s'
procstep_release_mode='%s'
procstep_resource_name='%s'
procstep_shell='%s'
procstep_step_index='%s'
procstep_time_limit='%s'
procstep_time_limit_units='%s'
procstep_working_directory='%s'
procstep_workspace_name='%s'
", $always_run, $broadcast, $error_handling, $exclusive_mode, $log_file_name,
    $parallel, $release_mode, $resource_name, $shell, $step_index, $time_limit, $time_limit_units,
    $working_directory, $workspace_name);

    $self->setSwitchText($switches);

    return 0;
}
