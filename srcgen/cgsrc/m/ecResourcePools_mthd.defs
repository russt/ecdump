#see also:  ecResourcePools.defs
sub loadResourcePools
#load each EC resource pool from the database
#return 0 on success.
{
    my ($self, $indent) = @_;

    #first load myself, the resource pool collection:
    printf STDERR "%sLOADING RESOURCE POOLS\n", ' 'x$indent  if ($VERBOSE);
    $self->addAllResourcePools();

    #then load each resource pool:
    for my $proc ($self->ecResourcePoolList()) {
        $proc->loadResourcePool();
    }

    return 0;
}

sub dumpResourcePools
#dump each EC resource pool to the dump tree.
#return 0 on success.
{
    my ($self, $indent) = @_;
    my $outroot = $self->rootDir();

    #first dump myself, the resource pool collection:
    printf STDERR "%sDUMPING RESOURCE POOLS -> %s\n", ' 'x$indent, $outroot if ($VERBOSE);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #then dump each resource pool:
    my $errs = 0;
    for my $proc ($self->ecResourcePoolList()) {
        $errs += $proc->dumpResourcePool($indent+2);
    }

    return $errs;
}

sub addOneResourcePool
#supports list and dump commands.
#add a single resourcePool to the collection.
#does not fully populate sub-objects. for that, use loadResourcePools();
#return 0 on success.
{
    my ($self, $resourcePoolName) = @_;

    #initialize resourcePool keys if not done yet:
    return 1 unless ($self->getDbKeysInitialized() || !$self->initResourcePoolKeys());

    #check that we have a legitimate resourcePool name:
    if (!defined($self->getNameIdMap->{$resourcePoolName})) {
        printf STDERR "%s:  ERROR:  resourcePool '%s' is not in the database.\n", ::srline(), $resourcePoolName;
        return 1;
    }

    #no setter, for mEcResourcePoolList - so use direct ref:
    push @{$self->{'mEcResourcePoolList'}},
        (new {=_ECRESOURCEPOOL_PACKAGE=}($self,
            $resourcePoolName,
            $self->getNameIdMap->{$resourcePoolName},
            $self->getNamePropIdMap->{$resourcePoolName},
            ));

    return 0;
}

sub addAllResourcePools
#add all of the EC resourcePools to the collection.
#returns 0 on success
{
    my ($self) = @_;

    #initialize resourcePool keys if not done yet:
    return 1 unless ($self->getDbKeysInitialized() || !$self->initResourcePoolKeys());

    #make sure we start with a clean list, in the event this routine has already been called:
    $self->{'mEcResourcePoolList'} = [];

    #now add one resourcePool obj. per retrieved resourcePool:
    for my $name (sort keys %{$self->getNameIdMap()}) {
        $self->addOneResourcePool($name);
    }

    return 0;
}

sub initResourcePoolKeys
{
    my ($self) = @_;
    my ($sqlpj) = $self->sqlpj();

    my $lbuf = sprintf("select name,id,property_sheet_id from ec_resource_pool");

    printf STDERR "%s: running sql query to get resourcePools ...\n", ::srline()  if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.
    } @{$sqlpj->getQueryResult()};

    #map (name,id,property_sheet_id) tuples into hashes:
    my (%nameId) = ();
    my (%namePropId) = ();
    for (my $ii=0; $ii < $#results; $ii += 3) {
        $nameId{$results[$ii]} = $results[$ii+1];
        $namePropId{$results[$ii]} = $results[$ii+2];
    }
    
    $self->setNameIdMap(\%nameId);
    $self->setNamePropIdMap(\%namePropId);

    if ($DDEBUG) {
        printf STDERR "%s: nameId result=\n", ::srline();
        dumpDbKeys(\%nameId);

        printf STDERR "%s: namePropId result=\n", ::srline();
        dumpDbKeys(\%namePropId);
    }

    $self->setDbKeysInitialized(1);
    return 0;
}
