#see also:  ecProps.defs
sub loadProps
#load each EC property from the database
#return 0 on success.
{
    my ($self) = @_;

    #first load myself the Property collection:
    printf STDERR "      LOADING PROPERTIES\n" if ($DDEBUG);
    $self->addAllProps();

    #then load each property:
    for my $proc ($self->ecPropsList()) {
        $proc->loadProp();
    }

    return 0;
}

sub dumpProps
#dump each EC property to the dump tree.
#return 0 on success.
{
    my ($self, $indent) = @_;
    my $outroot = $self->rootDir();

    #first dump myself the Property collection:
    printf STDERR "%sDUMPING PROPERTIES -> %s\n", ' 'x$indent, $outroot if ($DEBUG);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #then dump each property:
    my $errs = 0;
    for my $prop ($self->ecPropsList()) {
        $errs += $prop->dumpProp($indent+2);
    }

    return $errs;
}

sub addOneProp
#supports list and dump commands.
#add a single property to the collection.
#does not fully populate sub-objects. for that, use loadProps();
#return 0 on success.
{
    my ($self, $propertyName) = @_;

    #initialize property keys if not done yet:
    return 1 unless ($self->getDbKeysInitialized() || !$self->initPropKeys());

    #check that we have a legitimate property name:
    if (!defined($self->getNameIdMap->{$propertyName})) {
        printf STDERR "%s:  ERROR:  property '%s' is not in the database.\n", ::srline(), $propertyName;
        return 1;
    }

    #no setter, for mEcPropsList - so use direct ref:
    push @{$self->{'mEcPropsList'}}, (new {=_ECPROP_PACKAGE=}($self, $propertyName, $self->getNameIdMap->{$propertyName}));


    #TODO:  add property-level properties

    return 0;
}

sub addAllProps
#add all of the EC properties to the collection.
#returns 0 on success
{
    my ($self) = @_;

    #initialize property keys if not done yet:
    return 1 unless ($self->getDbKeysInitialized() || !$self->initPropKeys());

    #make sure we start with a clean list, in the event this routine has already been called:
    $self->{'mEcPropsList'} = [];

    #now add one property obj. per retrieved property:
    for my $name (sort keys %{$self->getNameIdMap()}) {
        if (defined($IgnorePropSheets{$name})) {
            ++$IgnorePropSheets{$name};
        } else {
            $self->addOneProp($name);
        }
    }

    return 0;
}

sub initPropKeys
{
    my ($self) = @_;
    my ($sqlpj) = $self->sqlpj();

    #result hash:
    my %nameId = ();
    $self->setNameIdMap(\%nameId);

    #okay if no property sheet is null, I guess...
    return 0 unless ($self->parentPropertySheetId());

    my $lbuf = sprintf("select name,id from ec_property where parent_sheet_id=%s", $self->parentPropertySheetId());

    printf STDERR "%s: running sql query to get properties for parent (%s,%s)\n", ::srline(), $self->rootDir(), $self->parentPropertySheetId  if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect an even number of name,id pairs
    } @{$sqlpj->getQueryResult()};


    #map name,id rows into hash:
    %nameId = @results;

    if ($DDEBUG) {
        printf STDERR "%s: nameId result=\n", ::srline();
        $utils->dumpDbKeys(\%nameId);
    }

    $self->setDbKeysInitialized(1);
    return 0;
}
