#see also:  ecParameter.defs
sub loadParameter
#load this parameter.
{
    my ($self) = @_;
    my ($name, $id) = ($self->parameterName(), $self->parameterId());

    printf STDERR "LOADING EC PARAMETER (%s,%s)\n", $name, $id if ($DDEBUG);

    #get my description (method defined in ecProjects):
    $self->fetchDescription('ec_formal_parameter', $id);

    #get my content:
    $self->fetchParameterContent($name, $id);

    return 0;
}

sub dumpParameter
#dump this parameter.
{
    my ($self, $indent) = @_;
    my ($name, $id) = ($self->parameterName(), $self->parameterId());
    my $outroot = $self->rootDir();

    printf STDERR "%sDUMPING EC PARAMETER (%s,%s) -> %s\n", ' 'x$indent, $name, $id, $outroot if ($DEBUG);

    os::createdir($outroot, 0775) unless (-d $outroot);
    if (!-d $outroot) {
        printf STDERR "%s: can't create output dir, '%s' (%s)\n", ::srline(), $outroot, $!;
        return 1;
    }

    #write my description out:
    $self->dumpDescription();
    $self->dumpParameterContent();
    $self->dumpParameterSwitches();

    return 0;
}

sub dumpParameterSwitches
#write the misc. parameter properties
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getSwitchText();
    my $contentfn = $self->switchTextFname();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->rootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, $contentfn));
}

sub dumpParameterContent
#write the parameter content to a file called content.
#return 0 if successful
{
    my ($self) = @_;
    my $txt = $self->getParameterContent();
    my $contentfn = $self->propertyContentFname();

    #don't create empty files:
    return 0 if ($txt eq '');

    my $outroot = $self->rootDir();

    #fix eol:
    $txt = "$txt\n" unless ($txt eq '' || $txt =~ /\n$/);

    return os::write_str2file(\$txt, path::mkpathname($outroot, $contentfn));
}

sub fetchParameterContent
#fetch the parameter content for a given parameter id.
#caller must have a setParameterContent(string) method.
#return 0 if successful
{
    my ($self, $name, $id) = @_;
    my ($sqlpj) = $self->sqlpj();

    #this is a result:
    $self->setParameterContent('');

# ec_formal_parameter:(id, version, name, created, created_millis, deleted, last_modified_by, modified, modified_millis, owner, default_value, description, entity_id, entity_type, expansion_deferred, required, type, acl_id, default_value_clob_id, description_clob_id)

    #this query should return only one row:
    my $lbuf = sprintf("select type, expansion_deferred, required, acl_id, default_value_clob_id, default_value from ec_formal_parameter where id=%d", $id);

    printf STDERR "%s: running sql query to get parameter content fields\n", ::srline() if ($DDEBUG);

    if ( !$sqlpj->sql_exec($lbuf) ) {
        printf STDERR "%s:  ERROR:  query '%s' failed.\n", ::srline(), $lbuf;
        return 1;
    }

    #o'wise, stash results (query returns a ref to a list of list refs):
    my @results = map {
        @{$_};    #dereference each row.  we expect one row with (type, expansion_deferred, required, acl_id, default_value_clob_id, default_value)
    } @{$sqlpj->getQueryResult()};

    if ( $#results+1 != 6 ) {
        printf STDERR "%s:  ERROR:  query '%s' returned wrong number of results (%d).\n", ::srline(), $lbuf, $#results+1;
        return 1;
    }

    #map undefined values:
    @results = map {
        defined($_) ? $_ : '';
    } @results;

    my ($type, $expansion_deferred, $required, $acl_id, $default_value_clob_id, $default_value) = @results;

    #$self->setDDebug(1);
    printf STDERR "%s: (type, expansion_deferred, required, acl_id, default_value_clob_id, default_value)=(%s)\n", ::srline(), join(',', @results) if ($DDEBUG);
    #$self->setDDebug(0);

    #create switches text (in a form that can be consumed by a posix shell):
    my $switches=sprintf("parameter_type='%s'
parameter_expansion_deferred='%s'
parameter_required='%s'
", $type, $expansion_deferred, $required);

    $self->setSwitchText($switches);

    #Note:  if we have a string and a clob, we prefer the clob, which is the full content

    if ($default_value_clob_id ne '') {
        my $clobtxt = '';
        if ($self->fetchClobText(\$clobtxt, $default_value_clob_id) != 0) {
            printf STDERR "%s:  ERROR:  failed to fetch parameter clob='%s' for %s[%s]\n", ::srline(), $default_value_clob_id, "ec_formal_parameter", $id;
            return 1;
        }
        $self->setParameterContent($clobtxt);
    } elsif ($default_value ne '') {
        $self->setParameterContent($default_value);
    }

    return 0;
}
